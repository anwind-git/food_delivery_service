# Generated by Django 5.0.1 on 2024-02-01 16:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=70, verbose_name='Город')),
                ('slug', models.SlugField(max_length=70, unique=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города обслуживания',
                'db_table': 'cities',
            },
        ),
        migrations.CreateModel(
            name='Addresses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addresse', models.CharField(db_index=True, max_length=250, verbose_name='Адрес магазина')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('working_time', models.CharField(max_length=16, verbose_name='Время работы')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organization.cities', verbose_name='Город')),
            ],
            options={
                'verbose_name': 'адрес',
                'verbose_name_plural': 'Адреса магазинов',
                'db_table': 'addresses',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='organization.addresses', verbose_name='Адрес')),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='organization.cities', verbose_name='Город')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fio', models.CharField(max_length=100, verbose_name='ФИО')),
                ('age', models.IntegerField(verbose_name='Возраст')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('telegram', models.CharField(max_length=100, verbose_name='Telegram')),
                ('status', models.BooleanField(default=False, verbose_name='На доставке')),
                ('day_off', models.BooleanField(default=False, verbose_name='Выходной')),
                ('work_authorization', models.BooleanField(default=False, verbose_name='Допущен к работе')),
                ('additional_information', models.TextField(null=True, verbose_name='Дополнительная информация')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organization.cities', verbose_name='Город')),
            ],
            options={
                'verbose_name': 'сотрудника',
                'verbose_name_plural': 'Служба доставки',
                'db_table': 'delivery_service',
            },
        ),
        migrations.CreateModel(
            name='NewManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=30, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=30, verbose_name='Имя')),
                ('middle_name', models.CharField(max_length=30, verbose_name='Отчество')),
                ('registration_form', models.CharField(max_length=50, verbose_name='Форма регистрации')),
                ('INN', models.PositiveBigIntegerField(verbose_name='ИНН')),
                ('OGRN', models.PositiveBigIntegerField(verbose_name='ОГРН')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('email', models.CharField(max_length=50, verbose_name='Электронная почта')),
                ('addresses', models.ManyToManyField(to='organization.addresses', verbose_name='Адреса ресторанов')),
            ],
            options={
                'verbose_name': 'руководителя',
                'verbose_name_plural': 'О руководителе',
                'db_table': 'about_manager',
            },
        ),
    ]
